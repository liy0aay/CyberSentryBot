import telebot
import requests
import re
import base64
import os
from telebot import types
from transformers import pipeline
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()  
API_TOKEN = os.getenv("API_TOKEN")  
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN:
    raise ValueError("‚ùå Telegram API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª")

bot = telebot.TeleBot(API_TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º NLP-–º–æ–¥–µ–ª—å
try:
    nlp = pipeline(
        "text-classification",
        model="valurank/phishing-bert-tiny",
        tokenizer="valurank/phishing-bert-tiny"
    )
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NLP-–º–æ–¥–µ–ª–∏: {e}")
    nlp = None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –∏ VirusTotal
def encode_url(url: str) -> str:
    return base64.urlsafe_b64encode(url.encode()).decode().rstrip("=")

def check_url_virustotal(url: str):
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    encoded_url = encode_url(url)
    
    try:
        report_url = f'https://www.virustotal.com/api/v3/urls/{encoded_url}'
        response = requests.get(report_url, headers=headers)
        
        print(f"üì° VirusTotal API Response: {response.status_code}")

        if response.status_code == 200:
            stats = response.json()['data']['attributes']['last_analysis_stats']
            return {
                'malicious': stats.get('malicious', 0),
                'suspicious': stats.get('suspicious', 0),
                'harmless': stats.get('harmless', 0)
            }
        elif response.status_code == 404:
            scan_url = 'https://www.virustotal.com/api/v3/urls'
            response = requests.post(scan_url, headers=headers, data={'url': url})
            if response.status_code == 200:
                return {'status': 'queued', 'message': 'üîÑ URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑'}
        
        return {'error': f"‚ö†Ô∏è API error: {response.status_code}"}
    
    except Exception as e:
        return {'error': str(e)}

def analyze_text(text: str):
    try:
        if not nlp:
            return {'error': '‚ùå NLP-–º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}
            
        result = nlp(text[:512])[0]
        phishing_keywords = {
            'password', 'account', 'verify', 'security',
            '–ø–∞—Ä–æ–ª—å', '–∫–∞—Ä—Ç–∞', '—Å—Ä–æ—á–Ω–æ', '–ø–µ—Ä–µ–≤–æ–¥', '–±–∞–Ω–∫', '–ª–æ–≥–∏–Ω'
        }
        found_keywords = set(word for word in re.findall(r'\w+', text.lower()) if word in phishing_keywords)
        
        return {
            'label': 'phishing' if result['label'] == 'phishing' else 'safe',
            'score': result['score'],
            'keywords': list(found_keywords)
        }
    
    except Exception as e:
        return {'error': str(e)}

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç.

üîç –Ø —É–º–µ—é:
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VirusTotal
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

üõ° –ö–æ–º–∞–Ω–¥—ã:
/check [—Ç–µ–∫—Å—Ç] ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
/safety_test ‚Äî –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
    bot.reply_to(message, help_text)

# –ö–æ–º–∞–Ω–¥–∞ /check
@bot.message_handler(commands=['check'])
def check_message(message):
    text = message.text.replace("/check", "").strip()
    if not text:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
        return

    report = []
    urls = re.findall(r'https?://\S+', text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    for url in urls:
        vt_result = check_url_virustotal(url)
        if 'malicious' in vt_result and vt_result['malicious'] > 5:
            report.append(f"üî¥ –û–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}\n"
                          f"‚Ä¢ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ–≤: {vt_result['malicious']}\n"
                          f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {vt_result['suspicious']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    text_result = analyze_text(text)
    if 'error' not in text_result and text_result['label'] == 'phishing' and text_result['score'] > 0.7:
        report.append(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
                      f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {text_result['score']:.0%}\n"
                      f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(text_result['keywords'])}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if report:
        bot.reply_to(message, "\n\n".join(report))
    else:
        bot.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def default_message_handler(message):
    bot.reply_to(message, "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)