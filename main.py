import telebot
import requests
import re
import base64
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
from typing import Dict, List
from telebot import types
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN or not VIRUSTOTAL_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–Ω–æ–ø–æ–∫
def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn_check = types.KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É")
    btn_test = types.KeyboardButton("üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    markup.add(btn_check, btn_test)
    return markup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–º–æ–¥–µ–ª–∏
try:
    model_name = "mrm8488/bert-tiny-finetuned-sms-spam-detection"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    nlp = pipeline(
        "text-classification",
        model=model,
        tokenizer=tokenizer
    )
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    nlp = None

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
SAFETY_QUESTIONS = [
    {
        "question": "–ö–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å, —Å–∞–º –Ω–µ –ø–æ–¥–≤–µ—Ä–≥—Å—è –≤–∑–ª–æ–º—É?",
        "options": [
            "–ß–µ—Ä–µ–∑ —É—Ç–µ—á–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –≥–¥–µ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–æ—Ç –∂–µ –ø–∞—Ä–æ–ª—å",
            "–° –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π (Brute Force)",
            "–ß–µ—Ä–µ–∑ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã–µ –∞—Ç–∞–∫–∏ –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞",
            "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∫—Ä–∞–∂–∏ –ø–∞—Ä–æ–ª–µ–π."
    },
    {
        "question": "–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å URL —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–°–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, g00gle.com –≤–º–µ—Å—Ç–æ google.com)",
            "–í—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π JavaScript-–∫–æ–¥ –≤ URL-–∞–¥—Ä–µ—Å",
            "–í—Å–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ URL."
    },
    {
        "question": "–ö–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ—Ö–∏—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –±–µ–∑ –≤–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑—É—è —Å–∫—Ä—ã—Ç—ã–µ –∫–µ–π–ª–æ–≥–≥–µ—Ä—ã –∏–ª–∏ —à–ø–∏–æ–Ω—Å–∫–æ–µ –ü–û",
            "–ü–æ–¥–º–µ–Ω—è—è —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö",
            "–°–∫–∞–Ω–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (NFC)",
            "–í—Å–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —É–≥—Ä–æ–∑—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    },
    {
        "question": "–ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π —Å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º",
            "–ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª–µ–π –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
            "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ –≥–æ–ª–æ–≤–µ",
            "–•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ"
        ],
        "correct": 3,
        "explanation": "–•—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ ‚Äî –∫—Ä–∞–π–Ω–µ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ."
    },
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –ø—Ä–∏ –∞—Ç–∞–∫–µ —Ç–∏–ø–∞ Man-in-the-Middle?",
        "options": [
            "–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Å–∞–π—Ç–æ–º",
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –≤ —Å–µ—Ç–∏",
            "–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—É—é —Ä–µ–∫–ª–∞–º—É –≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"
        ],
        "correct": 0,
        "explanation": "Man-in-the-Middle –∞—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Å–∞–π—Ç–æ–º."
    },
    {
        "question": "–ö–∞–∫–æ–π –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∑–∞—â–∏—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö Wi-Fi —Å–µ—Ç—è—Ö?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN",
            "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Bluetooth –∏ Wi-Fi, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è",
            "–ò–∑–±–µ–≥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–µ—Ç—è–º",
            "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ —ç—Ç–∏ –º–µ—Ä—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ç—è—Ö."
    },
    {
        "question": "–í—ã —Å–∫–∞—á–∏–≤–∞–µ—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–∏–¥–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?",
        "options": [
            "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞ –∏ —Å–≤–µ—Ä–∏—Ç—å —Ö–µ—à-—Å—É–º–º—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º",
            "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ –∏–ª–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ (sandbox)",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã b –∏ c"
        ],
        "correct": 3,
        "explanation": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sandbox ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
    },
    {
        "question": "–ö–∞–∫–æ–π –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –∞—Ç–∞–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏?",
        "options": [
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–≤–æ–Ω–æ–∫ –æ—Ç ¬´–±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞¬ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏",
            "–í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º, —è–∫–æ–±—ã –æ—Ç –≤–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–≥–∏, –Ω–æ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
            "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø–æ–º–æ—á—å –µ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç—É",
            "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ —ç—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã ‚Äî —Ç–∏–ø–∏—á–Ω—ã–µ –∞—Ç–∞–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏."
    },
    {
        "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
            "–í–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2FA)",
            "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ç–µ—á–∫–∏",
            "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞."
    }
]

user_progress = {}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def encode_url(url: str) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è VirusTotal"""
    return base64.urlsafe_b64encode(url.encode()).decode().rstrip("=")


def check_url_virustotal(url: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}

    try:
        encoded_url = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
        report_url = f'https://www.virustotal.com/api/v3/urls/{encoded_url}'

        response = requests.get(report_url, headers=headers, timeout=10)
        print(f"VirusTotal API Response: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            stats = data.get('data', {}).get('attributes', {}).get('last_analysis_stats', {})
            return {
                'malicious': stats.get('malicious', 0),
                'suspicious': stats.get('suspicious', 0),
                'harmless': stats.get('harmless', 0)
            }

        elif response.status_code == 404:
            scan_url = 'https://www.virustotal.com/api/v3/urls'
            response = requests.post(
                scan_url,
                headers=headers,
                data={'url': url},
                timeout=15
            )
            if response.status_code == 200:
                return {'status': 'queued', 'message': 'URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.'}
            else:
                return {'error': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {response.status_code}"}

        return {'error': f"–û—à–∏–±–∫–∞ API: {response.status_code}"}

    except Exception as e:
        print(f"VirusTotal Error: {str(e)}")
        return {'error': f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"}


def analyze_text(text: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é NLP"""
    try:
        if not nlp:
            return {'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}

        tokenized_input = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
        truncated_text = tokenizer.decode(tokenized_input["input_ids"][0], skip_special_tokens=True)

        result = nlp(truncated_text)[0]
        print(f"NLP Result: {result}")

        phishing_keywords = {
            '—Ä–æ–∑—ã–≥—Ä—ã—à', '–ø—Ä–∏–∑', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', '–ø–æ–¥–∞—Ä–æ–∫', '–∫–æ—Ä–æ–±–∫–∞', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
            '–±–∞–Ω–∫', '–∫–∞—Ä—Ç–∞', '–ø–∞—Ä–æ–ª—å', '—Å—Ä–æ—á–Ω–æ', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '–¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è',
            '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–∞–∫—Ü–∏—è', '–≤—ã–∏–≥—Ä—ã—à', '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'winner', 'prize', 'urgent', 'security', 'verify', 'account'
        }

        text_lower = text.lower()
        found_keywords = {
            keyword for keyword in phishing_keywords
            if re.search(rf'\b{re.escape(keyword)}\w*\b', text_lower)
        }

        return {
            'label': 'phishing' if result['label'] == 'LABEL_1' else 'safe',
            'score': result['score'],
            'keywords': list(found_keywords)
        }

    except Exception as e:
        print(f"NLP Analysis Error: {e}")
        return {'error': str(e)}

def perform_analysis(message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        text = message.text
        report = []
        print(f"Processing message for analysis: {text}")

        urls = re.findall(r'(?:(?:https?|ftp):\/\/)?[\w/\-?=%.]+\.[\w/\-?=%.]+', text)
        expanded_urls = []
        if urls:
            report.append("üîé **–ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫:**")
            for url in urls:
                if not url.startswith(('http://', 'https://', 'ftp://')):
                    url = 'http://' + url
                try:
                    response = requests.head(url, allow_redirects=True, timeout=7)
                    expanded = response.url
                    if expanded != url and len(expanded) > len(url) + 5:
                        report.append(f"üîó –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: `{url}` -> `{expanded}`")
                    expanded_urls.append(expanded)
                except requests.exceptions.RequestException as e:
                    print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è URL {url}: {str(e)}")
                    report.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É: `{url}` (–û—à–∏–±–∫–∞: {type(e).__name__})")
                    if url not in expanded_urls:
                         expanded_urls.append(url)
                except Exception as e:
                     print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {str(e)}")
                     report.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É: `{url}` (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")
                     if url not in expanded_urls:
                         expanded_urls.append(url)


            for url_to_check in expanded_urls:
                vt_result = check_url_virustotal(url_to_check)
                print(f"VirusTotal Result for {url_to_check}: {vt_result}")

                if vt_result.get('error'):
                    report.append(f"    - `{url_to_check}`: –û—à–∏–±–∫–∞ VirusTotal ({vt_result['error']})")
                elif vt_result.get('status') == 'queued':
                     report.append(f"    - `{url_to_check}`: ‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑ VT. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω.")
                elif vt_result.get('malicious', 0) > 1 or vt_result.get('suspicious', 0) > 1:
                    report.append(
                        f"    - `{url_to_check}`: üî¥ –û–ø–∞—Å–Ω–æ (VT: M:{vt_result['malicious']}, S:{vt_result['suspicious']}, H:{vt_result['harmless']})"
                    )
                elif vt_result.get('malicious', 0) > 0 or vt_result.get('suspicious', 0) > 0:
                     report.append(
                        f"    - `{url_to_check}`: üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (VT: M:{vt_result['malicious']}, S:{vt_result['suspicious']}, H:{vt_result['harmless']})"
                    )
                else:
                    report.append(
                        f"    - `{url_to_check}`: ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ (VT: M:{vt_result['malicious']}, S:{vt_result['suspicious']}, H:{vt_result['harmless']})"
                    )
        else:
             report.append("‚ÑπÔ∏è –°—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


        if nlp:
            report.append("\nüìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
            text_result = analyze_text(text)
            if text_result.get('error'):
                 report.append(f"    - –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {text_result['error']}")
            elif text_result.get('label') == 'phishing' and text_result.get('score', 0) > 0.6:
                report.append(
                    f"    - üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {text_result['score']:.0%})"
                )
                if text_result.get('keywords'):
                    report.append(f"      –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: `{', '.join(text_result['keywords'])}`")
            else:
                 report.append("    - ‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.")
        else:
             report.append("\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


        if report:
            bot.reply_to(message, "\n".join(report), parse_mode="Markdown")

    except Exception as e:
        print(f"Error in perform_analysis: {e}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫"""
    help_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç.

üõ°Ô∏è –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é NLP –∏ VirusTotal.
- –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.

üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ
"""
    image_path = 'cat.jpg'
    try:
        with open(image_path, 'rb') as photo_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=help_text,
                reply_markup=create_main_keyboard()
            )
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        bot.send_message(
            message.chat.id,
            help_text + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(commands=['safety_test'])
def start_safety_test_command(message):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    start_safety_test(message)

def start_safety_test(message):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_progress[user_id] = {"current_question": 0, "score": 0}
    bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.", reply_markup=types.ReplyKeyboardRemove())
    ask_question(chat_id, user_id)


def ask_question(chat_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (Inline –∫–Ω–æ–ø–∫–∏)"""
    if user_id not in user_progress:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ç–µ—Å—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_keyboard())
        return

    current_q_index = user_progress[user_id]["current_question"]
    if current_q_index >= len(SAFETY_QUESTIONS):
        finalize_test(chat_id, user_id)
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    question_data = SAFETY_QUESTIONS[current_q_index]

    for idx, option in enumerate(question_data["options"]):
        markup.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"answer_{current_q_index}_{idx}"
        ))

    bot.send_message(
        chat_id,
        f"–í–æ–ø—Ä–æ—Å {current_q_index + 1}/{len(SAFETY_QUESTIONS)}\n\n" +
        question_data["question"],
        reply_markup=markup,
        parse_mode="Markdown"
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    if user_id not in user_progress:
        bot.answer_callback_query(call.id, "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∞—Å. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è.")
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=None
        )
        bot.send_message(chat_id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.", reply_markup=create_main_keyboard())
        return

    try:
        _, q_idx_str, a_idx_str = call.data.split('_')
        q_idx = int(q_idx_str)
        a_idx = int(a_idx_str)
    except ValueError:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {call.data}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
        return

    if q_idx != user_progress[user_id]["current_question"]:
        bot.answer_callback_query(call.id, "–≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.")
        return

    question = SAFETY_QUESTIONS[q_idx]
    is_correct = (a_idx == question["correct"])

    if is_correct:
        user_progress[user_id]["score"] += 1
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
    else:
        result_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct']]}\n\n"

    bot.edit_message_text(
        chat_id=chat_id,
        message_id=call.message.message_id,
        text=f"**–í–æ–ø—Ä–æ—Å {q_idx + 1}:** {question['question']}\n\n" +
             f"–í–∞—à –æ—Ç–≤–µ—Ç: {question['options'][a_idx]}\n\n" +
             result_text +
             f"**–ü–æ—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}",
        reply_markup=None,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

    user_progress[user_id]["current_question"] += 1
    if user_progress[user_id]["current_question"] < len(SAFETY_QUESTIONS):
        ask_question(chat_id, user_id)
    else:
        finalize_test(chat_id, user_id)

def finalize_test(chat_id: int, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if user_id not in user_progress: return

    score = user_progress[user_id]["score"]
    total = len(SAFETY_QUESTIONS)
    percentage = (score / total) * 100 if total > 0 else 0

    feedback = ""
    if percentage == 100:
        feedback = "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Å–Ω–æ–≤–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
    elif percentage >= 70:
        feedback = f"üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({percentage:.0f}%)! –í—ã –Ω–µ–ø–ª–æ—Ö–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å, –Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å."
    elif percentage >= 40:
        feedback = f"‚ö†Ô∏è –ù–µ–ø–ª–æ—Ö–æ ({percentage:.0f}%), –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –ª—É—á—à–µ –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è."
    else:
        feedback = f"üò• –ù–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({percentage:.0f}%). –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

    recommendations_header = "\n\nüìå **–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:**"
    recommendations = [
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **—Å–ª–æ–∂–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏** –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.",
        "2. –í–∫–ª—é—á–∞–π—Ç–µ **–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA)** –≤–µ–∑–¥–µ, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ.",
        "3. **–ë—É–¥—å—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã** –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–∏—Å—å–º–∞–º, —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –∑–≤–æ–Ω–∫–∞–º, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ–Ω—å–≥–∏.",
        "4. **–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å–∞ —Å—Å—ã–ª–æ–∫** –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
        "5. **–ù–µ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã** –∏–∑ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
        "6. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN** –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º Wi-Fi —Å–µ—Ç—è–º.",
        "7. –†–µ–≥—É–ª—è—Ä–Ω–æ **–æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ü–û** –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.",
        "8. –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ —Ñ–∏—à–∏–Ω–≥–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏."
    ]

    final_message = (
        f"üèÅ **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}\n\n"
        f"{feedback}\n"
        f"{recommendations_header}\n" +
        "\n".join(recommendations) +
        "\n\nüîó *–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–∞—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, Kaspersky –∏–ª–∏ ESET.*"
    )

    bot.send_message(
        chat_id,
        final_message,
        reply_markup=create_main_keyboard(),
        parse_mode="Markdown"
    )

    if user_id in user_progress:
        del user_progress[user_id]


@bot.message_handler(commands=['check'])
def handle_check_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check [—Ç–µ–∫—Å—Ç]"""
    try:
        text_to_check = message.text.split(None, 1)[1]
        if text_to_check:
            fake_message = types.Message(
                message_id=message.message_id,
                from_user=message.from_user,
                date=message.date,
                chat=message.chat,
                content_type='text',
                options={},
                json_string=""
            )
            fake_message.text = text_to_check
            perform_analysis(fake_message)
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    except IndexError:
         bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    except Exception as e:
        print(f"Error in /check handler: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /check: {str(e)}")


@bot.message_handler(content_types=['text'])
def handle_message(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫"""
    user_id = message.from_user.id
    text = message.text

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É":
        bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    elif text == "üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
        start_safety_test(message)
    elif not text.startswith('/'):
        perform_analysis(message)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
