import os
import re
import base64
import requests

from typing import Dict, List

from dotenv import load_dotenv
import telebot
from telebot import types

from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification

from safe_test import init_safety_test_handlers
from analyzers import VirusTotalClient, PhishingAnalyzer, BaseAnalyzer


# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN or not VIRUSTOTAL_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# –∑–∞–≥—Ä—É–∑–∫–∞ NLP-–º–æ–¥–µ–ª–∏
def load_nlp_model():
    try:
        model_name = "mrm8488/bert-tiny-finetuned-sms-spam-detection"
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForSequenceClassification.from_pretrained(model_name)
        nlp = pipeline("text-classification", model=model, tokenizer=tokenizer)
        return nlp, tokenizer
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None, None


nlp, tokenizer = load_nlp_model()
vt_client = VirusTotalClient(VIRUSTOTAL_API_KEY)
analyzer = PhishingAnalyzer(vt_client, nlp, tokenizer)
bot = telebot.TeleBot(API_TOKEN)


# –∞–Ω–∞–ª–∏–∑
def perform_analysis(message: types.Message, analyzer: BaseAnalyzer):
    results = analyzer.analyze_message(message.text)
    bot.send_message(message.chat.id, "\n".join(results))


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É"),
        types.KeyboardButton("üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    )
    return markup


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def get_help_text():
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç.\n\n"
        "üõ°Ô∏è –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é NLP –∏ VirusTotal.\n"
        "- –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.\n\n"
        "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
    )


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
user_progress = {}
init_safety_test_handlers(bot, user_progress, create_main_keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    try:
        with open("CyberSentry.png", "rb") as photo_file:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=get_help_text(),
                reply_markup=create_main_keyboard()
            )
    except FileNotFoundError:
        bot.send_message(
            message.chat.id,
            get_help_text() + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(commands=["check"])
def check_handler(message):
    try:
        text_to_check = message.text.split(None, 1)[1]
        result = analyzer.analyze_message(text_to_check)
        bot.reply_to(message, "\n".join(result), parse_mode="Markdown")
    except IndexError:
        bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check"
        )


@bot.message_handler(content_types=["text"])
def handle_message(message):
    text = message.text.strip()

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É":
        bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    elif text == "üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        bot.send_message(
            message.chat.id,
            "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /safety_test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"
        )
    elif not text.startswith("/"):
        perform_analysis(message, analyzer)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")