import telebot
import requests
import re
import base64
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
from typing import Dict, List
from telebot import types
from dotenv import load_dotenv
import os
from safety_test import init_safety_test_handlers

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN or not VIRUSTOTAL_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = telebot.TeleBot(API_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–º–æ–¥–µ–ª–∏
try:
    model_name = "mrm8488/bert-tiny-finetuned-sms-spam-detection"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    nlp = pipeline(
        "text-classification",
        model=model,
        tokenizer=tokenizer
    )
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    nlp = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–Ω–æ–ø–æ–∫
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn_check = types.KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É")
    btn_test = types.KeyboardButton("üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    markup.add(btn_check, btn_test)
    return markup

user_progress = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
init_safety_test_handlers(bot, user_progress, create_main_keyboard)

def check_url_virustotal(url: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}

    try:
        encoded_url = base64.urlsafe_b64encode(url.encode()).decode().rstrip("=")
        report_url = f'https://www.virustotal.com/api/v3/urls/{encoded_url}'

        response = requests.get(report_url, headers=headers, timeout=10)
        print(f"VirusTotal API Response: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            stats = data.get('data', {}).get('attributes', {}).get('last_analysis_stats', {})
            return {
                'malicious': stats.get('malicious', 0),
                'suspicious': stats.get('suspicious', 0),
                'harmless': stats.get('harmless', 0),
            }

        elif response.status_code == 404:
            scan_url = 'https://www.virustotal.com/api/v3/urls'
            response = requests.post(
                scan_url,
                headers=headers,
                data={'url': url},
                timeout=15
            )
            if response.status_code == 200:
                return {'status': 'queued', 'message': 'URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.'}
            else:
                return {'error': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {response.status_code}"}
                
        elif response.status_code == 429:
            return {'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ VirusTotal. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}

        else:
            return {'error': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API: {response.status_code}'}
                   
    except requests.exceptions.RequestException as e:
        return {'error': f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"}
        
    except Exception as e:
        return {'error': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def analyze_text(text: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é NLP"""
    try:
        if not nlp:
            return {'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}

        tokenized_input = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
        truncated_text = tokenizer.decode(tokenized_input["input_ids"][0], skip_special_tokens=True)

        result = nlp(truncated_text)[0]
        print(f"NLP Result: {result}")

        return {
            'label': 'phishing' if result['label'] == 'LABEL_1' else 'safe',
            'score': result['score'],
        }

    except Exception as e:
        print(f"NLP Analysis Error: {e}")
        return {'error': str(e)}

def perform_analysis(message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        text = message.text
        report = []
        print(f"Processing message for analysis: {text}")

        urls = re.findall(r'(?:(?:https?|ftp):\/\/)?(?:www\.)?(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(?:\/[^\s]*)?', text)
        
        if urls:
            report.append("üîé –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫:")
            for original_url in urls:
                url_to_check = original_url if original_url.startswith(('http://', 'https://', 'ftp://')) else 'http://' + original_url
                try:
                    response = requests.get(
                        url_to_check,
                        allow_redirects=True, 
                        timeout=7,
                        headers={'User-Agent': 'Mozilla/5.0'}
                    )
                    expanded_url = response.url

                    vt_result = check_url_virustotal(expanded_url)
                    print(f"VirusTotal Result for {expanded_url}: {vt_result}")
    
                    if vt_result.get('error'):
                        report.append(f"    - `{original_url}`: –û—à–∏–±–∫–∞ VirusTotal ({vt_result['error']})")
                    elif vt_result.get('status') == 'queued':
                         report.append(f"    - `{original_url}`: ‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑ VT. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω.")
                    elif vt_result.get('malicious', 0) > 1 or vt_result.get('suspicious', 0) > 1:
                        report.append(
                            f"    - `{original_url}`: üî¥ –û–ø–∞—Å–Ω–æ"
                        )
                    elif vt_result.get('malicious', 0) > 0 or vt_result.get('suspicious', 0) > 0:
                         report.append(
                            f"    - `{original_url}`: üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"
                        )
                    else:
                        report.append(
                            f"    - `{original_url}`: ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ"
                        )
                except requests.exceptions.RequestException as e:
                    report.append(f"    - `{original_url}`: ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–û—à–∏–±–∫–∞ —Å–µ—Ç–∏)")
                except Exception as e:
                    report.append(f"    - `{original_url}`: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ({type(e).__name__})")
        else:
             report.append("‚ÑπÔ∏è –°—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        if nlp:
            report.append("\nüìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
            text_result = analyze_text(text)
            if text_result.get('error'):
                 report.append(f"    - –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {text_result['error']}")
            elif text_result.get('label') == 'phishing' and text_result.get('score', 0) > 0.5:
                report.append(
                    f"    - üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {text_result['score']:.0%})"
                )
            else:
                 report.append("    - ‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.")
        else:
             report.append("\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

        if report:
            bot.reply_to(message, "\n".join(report), parse_mode="Markdown")

    except Exception as e:
        print(f"Error in perform_analysis: {e}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫"""
    help_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç.

üõ°Ô∏è –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é NLP –∏ VirusTotal.
- –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.

üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ
"""
    image_path = 'cat.jpg'
    try:
        with open(image_path, 'rb') as photo_file:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=help_text,
                reply_markup=create_main_keyboard()
            )
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {image_path}")
        bot.send_message(
            message.chat.id,
            help_text + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
            reply_markup=create_main_keyboard()
        )

@bot.message_handler(commands=['check'])
def check_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    try:
        text_to_check = message.text.split(None, 1)[1]
        if text_to_check:
            fake_message = types.Message(
                message_id=message.message_id,
                from_user=message.from_user,
                date=message.date,
                chat=message.chat,
                content_type='text',
                options={},
                json_string=""
            )
            fake_message.text = text_to_check
            perform_analysis(fake_message)
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check")

@bot.message_handler(content_types=['text'])
def handle_message(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫"""
    text = message.text

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É":
        bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    elif text == "üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É safety_test, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ init_safety_test_handlers
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!", reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /safety_test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞")
    elif not text.startswith('/'):
        perform_analysis(message)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
