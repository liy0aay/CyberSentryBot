"""
–ê–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NLP –º–æ–¥–µ–ª–µ–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∑–Ω–∞–Ω–∏–π –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥

–¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- API_TOKEN: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
- VIRUSTOTAL_API_KEY: –ö–ª—é—á –¥–ª—è VirusTotal API

–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- Python-telegram-bot –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
- Transformers –¥–ª—è NLP –∞–Ω–∞–ª–∏–∑–∞
- VirusTotal API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL

Raises:
    ValueError: –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

"""
import os
import re
import base64
import requests

from typing import Dict, List

from dotenv import load_dotenv
import telebot
from telebot import types

from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification

from safe_test import init_safety_test_handlers
from analyzers import VirusTotalClient, PhishingAnalyzer, BaseAnalyzer


# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN or not VIRUSTOTAL_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")


def load_nlp_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç NLP –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞/—Ñ–∏—à–∏–Ω–≥–∞.

    Returns:
        tuple: (nlp_pipeline, tokenizer) - –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
    """   
    try:
        model_name = "mrm8488/bert-tiny-finetuned-sms-spam-detection"
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForSequenceClassification.from_pretrained(model_name)
        nlp = pipeline("text-classification", model=model, tokenizer=tokenizer)
        return nlp, tokenizer
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
nlp, tokenizer = load_nlp_model()
vt_client = VirusTotalClient(VIRUSTOTAL_API_KEY)
analyzer = PhishingAnalyzer(vt_client, nlp, tokenizer)
bot = telebot.TeleBot(API_TOKEN)


def perform_analysis(message: types.Message, analyzer: BaseAnalyzer):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–∏—à–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analyzer (BaseAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    results = analyzer.analyze_message(message.text)
    bot.send_message(message.chat.id, "\n".join(results))


def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

    Returns:
        types.ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è/—Å—Å—ã–ª–∫–∏ –∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    """  
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É"),
        types.KeyboardButton("üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
    )
    return markup


def get_help_text():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.

    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
    """ 
    return (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç.\n\n"
        "üõ°Ô∏è –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏—à–∏–Ω–≥ –∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é NLP –∏ VirusTotal.\n"
        "- –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É–≥—Ä–æ–∑–∞—Ö.\n\n"
        "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ"
    )


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
user_progress = {}
init_safety_test_handlers(bot, user_progress, create_main_keyboard)


@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏ /help, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Behavior:
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–æ—Ç–∏–ø —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    """ 
    try:
        with open("CyberSentry.png", "rb") as photo_file:
            bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=get_help_text(),
                reply_markup=create_main_keyboard()
            )
    except FileNotFoundError:
        bot.send_message(
            message.chat.id,
            get_help_text() + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)",
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
            reply_markup=create_main_keyboard()
        )


@bot.message_handler(commands=["check"])
def check_handler(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞.

    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Behavior:
        - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check
        - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        text_to_check = message.text.split(None, 1)[1]
        result = analyzer.analyze_message(text_to_check)
        bot.reply_to(message, "\n".join(result), parse_mode="Markdown")
    except IndexError:
        bot.reply_to(
            message,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /check"
        )


@bot.message_handler(content_types=["text"])
def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Behavior:
        - –î–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        - –î–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        - –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ñ–∏—à–∏–Ω–≥
    """
    text = message.text.strip()

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/—Å—Å—ã–ª–∫—É":
        bot.reply_to(message, "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")
    elif text == "üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        bot.send_message(
            message.chat.id,
            "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /safety_test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"
        )
    elif not text.startswith("/"):
        perform_analysis(message, analyzer)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")