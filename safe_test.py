from telebot import types

SAFETY_QUESTIONS = [
    {
        "question": "–ö–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å, —Å–∞–º –Ω–µ –ø–æ–¥–≤–µ—Ä–≥—Å—è –≤–∑–ª–æ–º—É?",
        "options": [
            "–ß–µ—Ä–µ–∑ —É—Ç–µ—á–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
            "–° –ø–æ–º–æ—â—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π",
            "–ß–µ—Ä–µ–∑ —Ñ–∏—à–∏–Ω–≥ –∏ –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞",
            "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –∫—Ä–∞–∂–∏ –ø–∞—Ä–æ–ª–µ–π."
    },
    {
        "question": "–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å URL —Å–∞–π—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≥–ª—è–¥–µ–ª –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–°–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
            "–í—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π JavaScript-–∫–æ–¥ –≤ URL-–∞–¥—Ä–µ—Å",
            "–í—Å–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ URL."
    },
    {
        "question": "–ö–∞–∫ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ—Ö–∏—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –±–µ–∑ –≤–∞—à–µ–≥–æ –≤–µ–¥–æ–º–∞?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑—É—è —Å–∫—Ä—ã—Ç—ã–µ –∫–µ–π–ª–æ–≥–≥–µ—Ä—ã –∏–ª–∏ —à–ø–∏–æ–Ω—Å–∫–æ–µ –ü–û",
            "–ü–æ–¥–º–µ–Ω—è—è —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö",
            "–°–∫–∞–Ω–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ NFC",
            "–í—Å–µ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —É–≥—Ä–æ–∑—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    },
    {
        "question": "–ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π",
            "–ó–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª–µ–π –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
            "–ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ –≥–æ–ª–æ–≤–µ",
            "–•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ"
        ],
        "correct": 3,
        "explanation": "–•—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ ‚Äî –∫—Ä–∞–π–Ω–µ –Ω–µ–Ω–∞–¥–µ–∂–Ω–æ."
    },
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –ø—Ä–∏ –∞—Ç–∞–∫–µ —Ç–∏–ø–∞ Man-in-the-Middle?",
        "options": [
            "–ò–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Å–∞–π—Ç–æ–º",
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à IP-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –≤ —Å–µ—Ç–∏",
            "–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—É—é —Ä–µ–∫–ª–∞–º—É –≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã",
            "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤"
        ],
        "correct": 0,
        "explanation": "Man-in-the-Middle –∞—Ç–∞–∫—É—é—â–∏–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Å–∞–π—Ç–æ–º."
    },
    {
        "question": "–ö–∞–∫–æ–π –∏–∑ –º–µ—Ç–æ–¥–æ–≤ –∑–∞—â–∏—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ç–∏–≤ –∞—Ç–∞–∫ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö Wi-Fi —Å–µ—Ç—è—Ö?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN",
            "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Bluetooth –∏ Wi-Fi",
            "–ò–∑–±–µ–≥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–¥–∫–ª. –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–µ—Ç—è–º",
            "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"
        ],
        "correct": 3,
        "explanation": "–í—Å–µ —ç—Ç–∏ –º–µ—Ä—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ç—è—Ö."
    },
    {
        "question": "–í—ã —Å–∫–∞—á–∏–≤–∞–µ—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –Ω–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–∏–¥–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å?",
        "options": [
            "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é –ø–æ–¥–ø–∏—Å—å —Ñ–∞–π–ª–∞, —Å–≤–µ—Ä–∏—Ç—å —Ö–µ—à-—Å—É–º–º—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º",
            "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ –∏–ª–∏ –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã b –∏ c"
        ],
        "correct": 3,
        "explanation": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sandbox ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥."
    },
    {
        "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è?",
        "options": [
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞",
            "–í–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (2FA)",
            "–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ç–µ—á–∫–∏",
            "–í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        ],
        "correct": 3,
        "explanation": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –ª—É—á—à–∞—è –∑–∞—â–∏—Ç–∞."
    }
]


def init_safety_test_handlers(bot_instance, progress_dict, keyboard_func) -> None:
    bot = bot_instance
    user_progress = progress_dict
    create_main_keyboard = keyboard_func

    @bot.message_handler(commands=["safety_test"])
    def start_safety_test_command(message):
        user_id = message.from_user.id
        chat_id = message.chat.id

        user_progress[user_id] = {"current_question": 0, "score": 0}

        bot.send_message(
            chat_id,
            "üìã –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        ask_question(chat_id, user_id)

    def ask_question(chat_id: int, user_id: int) -> None:
        if user_id not in user_progress:
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=create_main_keyboard())
            return

        current_q_index = user_progress[user_id]["current_question"]

        if current_q_index >= len(SAFETY_QUESTIONS):
            finalize_test(chat_id, user_id)
            return

        question_data = SAFETY_QUESTIONS[current_q_index]

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for option in question_data["options"]:
            markup.add(types.KeyboardButton(option))

        bot.send_message(
            chat_id,
            f"*–í–æ–ø—Ä–æ—Å {current_q_index + 1} –∏–∑ {len(SAFETY_QUESTIONS)}*\n\n{question_data['question']}",
            reply_markup=markup,
            parse_mode="Markdown"
        )

    @bot.message_handler(func=lambda msg: is_answer(msg.text))
    def handle_text_answer(message):
        user_id = message.from_user.id
        chat_id = message.chat.id

        if user_id not in user_progress:
            bot.send_message(chat_id, "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.",
                             reply_markup=create_main_keyboard())
            return

        current_q_index = user_progress[user_id]["current_question"]
        question_data = SAFETY_QUESTIONS[current_q_index]

        try:
            selected_index = question_data["options"].index(message.text.strip())
        except ValueError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
            return

        correct_index = question_data["correct"]
        is_correct = selected_index == correct_index

        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else (
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{question_data['options'][correct_index]}*"
        )
        explanation = question_data["explanation"]

        if is_correct:
            user_progress[user_id]["score"] += 1

        bot.send_message(
            chat_id,
            f"{response}\n\nüìö –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {explanation}",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )

        user_progress[user_id]["current_question"] += 1
        ask_question(chat_id, user_id)

    def is_answer(text: str) -> bool:
        return any(text == option for q in SAFETY_QUESTIONS for option in q["options"])

    def finalize_test(chat_id: int, user_id: int) -> None:
        if user_id not in user_progress:
            return

        score = user_progress[user_id]["score"]
        total = len(SAFETY_QUESTIONS)
        percentage = (score / total) * 100

        if percentage == 100:
            feedback = "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Å–Ω–æ–≤–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        elif percentage >= 70:
            feedback = f"üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({percentage:.0f}%)! –í—ã –Ω–µ–ø–ª–æ—Ö–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å, –Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å."
        elif percentage >= 40:
            feedback = f"‚ö†Ô∏è –ù–µ–ø–ª–æ—Ö–æ ({percentage:.0f}%), –Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –ª—É—á—à–µ –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è."
        else:
            feedback = f"üò• –ù–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({percentage:.0f}%). –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

        recommendations = "\n".join([
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏.",
            "2. –í–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA).",
            "3. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å–∞ —Å–∞–π—Ç–æ–≤ –∏ —Å—Å—ã–ª–æ–∫.",
            "4. –ù–µ —Å–∫–∞—á–∏–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö.",
            "6. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ü–û –∏ —Å–∏—Å—Ç–µ–º—ã.",
            "7. –ò–∑—É—á–∞–π—Ç–µ —Ñ–∏—à–∏–Ω–≥ –∏ –º–µ—Ç–æ–¥—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏."
        ])

        bot.send_message(
            chat_id,
            f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}\n\n"
            f"{feedback}\n\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}\n\n"
            "üîê *–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–± –æ–Ω–ª–∞–π–Ω-–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö Kaspersky, ESET –∏ –¥—Ä—É–≥–∏—Ö.*",
            parse_mode="Markdown",
            reply_markup=create_main_keyboard()
        )

        user_progress.pop(user_id, None)