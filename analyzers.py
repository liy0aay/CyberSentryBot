"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏—à–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ VirusTotal –∏ NLP.

–ö–ª–∞—Å—Å—ã:
    - VirusTotalClient: –ü—Ä–æ–≤–µ—Ä–∫–∞ URL —á–µ—Ä–µ–∑ VirusTotal API
    - PhishingAnalyzer: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∏—à–∏–Ω–≥

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - Python 3.8+
    - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: requests, transformers
"""
import re
import base64
import requests
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification

class VirusTotalClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VirusTotal API.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL —á–µ—Ä–µ–∑ VirusTotal.
    """     
    def __init__(self, api_key: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç VirusTotal.

        Args:
            api_key (str): API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VirusTotal API
        """           
        self.api_key = api_key
        self.headers = {'x-apikey': self.api_key}

    def _handle_api_error(self, response, url: str) -> dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ API VirusTotal (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥).

        Args:
            response: –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ requests
            url (str): –ò—Å—Ö–æ–¥–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è

        Returns:
            dict: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """          
        if response.status_code == 404:
            scan_url = 'https://www.virustotal.com/api/v3/urls'
            resp = requests.post(scan_url, headers=self.headers, data={'url': url})
            if resp.status_code == 200:
                return {
                    'status': 'queued',
                    'message': 'URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
                }
            return {'error': f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {resp.status_code}"}
        if response.status_code == 429:
            return {'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'}
        return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}

    def check_url(self, url: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL —á–µ—Ä–µ–∑ VirusTotal API.

        Args:
            url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–ª—é—á–∞–º–∏:
                - malicious (int): –ß–∏—Å–ª–æ –¥–µ—Ç–µ–∫—Ç–æ–≤ –∫–∞–∫ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π
                - suspicious (int): –ß–∏—Å–ª–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ–≤  
                - harmless (int): –ß–∏—Å–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ–≤
                - error (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        """
        try:
            encoded = base64.urlsafe_b64encode(url.encode()).decode().rstrip("=")
            api_url = f'https://www.virustotal.com/api/v3/urls/{encoded}'
            resp = requests.get(api_url, headers=self.headers, timeout=10)

            if resp.status_code == 200:
                stats = (
                    resp.json()
                    .get('data', {})
                    .get('attributes', {})
                    .get('last_analysis_stats', {})
                )
                return {
                    'malicious': stats.get('malicious', 0),
                    'suspicious': stats.get('suspicious', 0),
                    'harmless': stats.get('harmless', 0),
                }

            return self._handle_api_error(resp, url)

        except requests.exceptions.RequestException as e:
            return {'error': f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"}
        except Exception as e:
            return {'error': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


class BaseAnalyzer:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.
    """    
    def analyze_message(self, text: str) -> list:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Raises:
            NotImplementedError: –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ

        Returns:
            list: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """         
        raise NotImplementedError(
            "–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ"
        )


class PhishingAnalyzer(BaseAnalyzer):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    –°–æ–≤–º–µ—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ NLP –∏ –ø—Ä–æ–≤–µ—Ä–∫—É URL —á–µ—Ä–µ–∑ VirusTotal.
    """  
    def __init__(self, vt_client: VirusTotalClient, nlp_pipeline=None, tokenizer=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            vt_client (VirusTotalClient): –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
            nlp_pipeline: NLP-–º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)
            tokenizer: –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è NLP-–º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None)
        """       
        self.vt_client = vt_client
        self.nlp = nlp_pipeline
        self.tokenizer = tokenizer

    def analyze_text(self, text: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ñ–∏—à–∏–Ω–≥–∞.

        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –º–µ—Ç–∫–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        """               
        if not self.nlp or not self.tokenizer:
            return {'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}

        try:
            inputs = self.tokenizer(
                text, return_tensors="pt", truncation=True, max_length=512
            )
            truncated = self.tokenizer.decode(
                inputs["input_ids"][0], skip_special_tokens=True
            )
            result = self.nlp(truncated)[0]
            return {
                'label': 'phishing' if result['label'] == 'LABEL_1' else 'safe',
                'score': result['score'],
            }
        except Exception as e:
            return {'error': str(e)}

    def extract_urls(self, text: str) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞.

        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ URL

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL
        """   
        return re.findall(
            r'(?:(?:https?|ftp):\/\/)?'
            r'(?:www\.)?'
            r'(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'
            r'(?:\/[^\s]*)?',
            text
        )

    def _check_url_risk(self, url: str) -> str: # –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∏—Å–∫ URL (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥).

        Args:
            url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        """ 
        full_url = url if url.startswith(('http://', 'https://', 'ftp://')) \
            else f'http://{url}'
        try:
            response = requests.get(
                full_url, allow_redirects=True, timeout=7,
                headers={'User-Agent': 'Mozilla/5.0'}
            )
            expanded = response.url
            result = self.vt_client.check_url(expanded)

            if result.get('error'):
                return f"    - `{url}`: ‚ö†Ô∏è {result['error']}"
            if result.get('status') == 'queued':
                return f"    - `{url}`: ‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑"
            if result.get('malicious', 0) > 1 or result.get('suspicious', 0) > 1:
                return f"    - `{url}`: üî¥ –û–ø–∞—Å–Ω–æ"
            if result.get('malicious', 0) > 0 or result.get('suspicious', 0) > 0:
                return f"    - `{url}`: üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ"
            return f"    - `{url}`: ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ"
        except Exception as e:
            return f"    - `{url}`: ‚ö†Ô∏è –û—à–∏–±–∫–∞ ({type(e).__name__})"

    def analyze_message(self, text: str) -> list:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–∏—à–∏–Ω–≥.

        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            list: –û—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ URL –∏ —Ç–µ–∫—Å—Ç–∞
        """          
        report = []

        urls = self.extract_urls(text)
        if urls:
            report.append("üîé –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫:")
            for url in urls:
                report.append(self._check_url_risk(url))
        else:
            report.append("‚ÑπÔ∏è –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        report.append("\nüìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
        result = self.analyze_text(text)

        if result.get('error'):
            report.append(f"    - –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {result['error']}")
        elif result['label'] == 'phishing' and result['score'] > 0.5:
            confidence = f"{result['score']:.0%}"
            report.append(f"    - üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence})")
        else:
            report.append("    - ‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.")

        return report