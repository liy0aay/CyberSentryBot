import telebot
import requests
import re
import base64
#from flask import Flask, request
from telebot import types
from transformers import pipeline
from typing import List, Dict
from dotenv import load_dotenv
import os

load_dotenv()  
API_TOKEN = os.getenv("API_TOKEN")  
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

if not API_TOKEN:
    raise ValueError("Telegram token not found! Check .env file")

bot = telebot.TeleBot(API_TOKEN)
# app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–º–æ–¥–µ–ª–∏
try:
    nlp = pipeline(
        "text-classification",
        model="valurank/phishing-bert-tiny",  # –†–∞–±–æ—á–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
        tokenizer="valurank/phishing-bert-tiny"
    )
except Exception as e:
    print(f"Error loading NLP model: {e}")
    nlp = None

# –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SAFETY_QUESTIONS = [
    {
        "question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å?",
        "options": [
            "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Å–∞–π—Ç –≤—Ä—É—á–Ω—É—é",
            "–ü–µ—Ä–µ—Å–ª–∞—Ç—å –¥—Ä—É–≥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        ],
        "correct": 1,
        "explanation": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö."
    },
    {
        "question": "–ö–∞–∫–æ–π –ø–∞—Ä–æ–ª—å –Ω–∞–∏–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–µ–Ω?",
        "options": [
            "123456",
            "qwerty",
            "H7$kL9!vRn2*"
        ],
        "correct": 2,
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ! –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 12 —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏."
    }
]

user_progress = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def encode_url(url: str) -> str:
    return base64.urlsafe_b64encode(url.encode()).decode().strip("=")

def check_url_virustotal(url: str) -> Dict:
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    encoded_url = encode_url(url)
    
    try:
        report_url = f'https://www.virustotal.com/api/v3/urls/{encoded_url}'
        response = requests.get(report_url, headers=headers)
        
        if response.status_code == 200:
            stats = response.json()['data']['attributes']['last_analysis_stats']
            return {
                'malicious': stats['malicious'],
                'suspicious': stats['suspicious'],
                'harmless': stats['harmless']
            }
        elif response.status_code == 404:
            scan_url = 'https://www.virustotal.com/api/v3/urls'
            response = requests.post(scan_url, headers=headers, data={'url': url})
            if response.status_code == 200:
                return {'status': 'queued', 'message': 'URL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑'}
        
        return {'error': f"API error: {response.status_code}"}
    
    except Exception as e:
        return {'error': str(e)}

def analyze_text(text: str) -> Dict:
    try:
        if not nlp:
            return {'error': '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
            
        result = nlp(text[:512])[0]
        phishing_keywords = {
            'password', 'account', 'verify', 'security',
            '–ø–∞—Ä–æ–ª—å', '–∫–∞—Ä—Ç–∞', '—Å—Ä–æ—á–Ω–æ', '–ø–µ—Ä–µ–≤–æ–¥', '–±–∞–Ω–∫', '–ª–æ–≥–∏–Ω'
        }
        found_keywords = set(word for word in re.findall(r'\w+', text.lower()) if word in phishing_keywords)
        
        return {
            'label': 'phishing' if result['label'] == 'phishing' else 'safe',
            'score': result['score'],
            'keywords': list(found_keywords)
        }
    
    except Exception as e:
        return {'error': str(e)}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
# @app.route('/')
# def set_webhook():
#     bot.remove_webhook()
#     bot.set_webhook(url='https://szcm4wo.pythonanywhere.com')
#     return "Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @app.route('/webhook', methods=['POST'])
# def webhook():
#     update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
#     bot.process_new_updates([update])
#     return 'OK', 200

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = """
üîç –Ø –∞–Ω—Ç–∏—Ñ–∏—à–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç! –ü—Ä–æ–≤–µ—Ä—é:
- –°—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VirusTotal
- –¢–µ–∫—Å—Ç –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –î–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ö–æ–º–∞–Ω–¥—ã:
/safety_test - –¢–µ—Å—Ç –∑–Ω–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
/check [—Ç–µ–∫—Å—Ç] - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['safety_test'])
def start_safety_test(message):
    user_id = message.from_user.id
    user_progress[user_id] = {"current_question": 0, "correct": 0}
    ask_question(message.chat.id, user_id)

def ask_question(chat_id, user_id):
    markup = types.InlineKeyboardMarkup()
    question_data = SAFETY_QUESTIONS[user_progress[user_id]["current_question"]]
    
    for idx, option in enumerate(question_data["options"]):
        markup.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"answer_{user_progress[user_id]['current_question']}_{idx}"
        ))
    
    bot.send_message(chat_id, 
        f"–í–æ–ø—Ä–æ—Å {user_progress[user_id]['current_question']+1}/{len(SAFETY_QUESTIONS)}\n\n" +
        question_data["question"], 
        reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_id = call.from_user.id
    if user_id not in user_progress:
        return
    
    _, q_idx, a_idx = call.data.split('_')
    q_idx = int(q_idx)
    a_idx = int(a_idx)
    
    question = SAFETY_QUESTIONS[q_idx]
    
    if a_idx == question["correct"]:
        user_progress[user_id]["correct"] += 1
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
    else:
        result = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!\n"
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=result + question["explanation"]
    )
    
    user_progress[user_id]["current_question"] += 1
    
    if user_progress[user_id]["current_question"] < len(SAFETY_QUESTIONS):
        ask_question(call.message.chat.id, user_id)
    else:
        correct = user_progress[user_id]["correct"]
        total = len(SAFETY_QUESTIONS)
        score = correct / total
        
        if score == 1:
            feedback = "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
        elif score >= 0.7:
            feedback = "üëç –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏:"
        else:
            feedback = "‚ö†Ô∏è –ù—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è:"
        
        recommendations = [
            "üîπ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
            "üîπ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –ü–û –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã",
            "üîπ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏",
            "üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ HTTPS –≤ –∞–¥—Ä–µ—Å–µ —Å–∞–π—Ç–∞",
            "üîπ –î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        bot.send_message(
            call.message.chat.id,
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}\n\n{feedback}\n" + 
            "\n".join(recommendations) + 
            "\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://www.kaspersky.ru/resource-center/preemptive-safety/top-10-preemptive-safety-rules-and-what-not-to-do-online"
        )
        del user_progress[user_id]

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        text = message.text
        report = []
        
        urls = re.findall(r'https?://\S+', text)
        for url in urls:
            vt_result = check_url_virustotal(url)
            if 'malicious' in vt_result and vt_result['malicious'] > 5:
                report.append(
                    f"üî¥ –û–ø–∞—Å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {url}\n"
                    f"‚Ä¢ –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ–≤: {vt_result['malicious']}\n"
                    f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {vt_result['suspicious']}"
                )
        
        if not urls:
            text_result = analyze_text(text)
            if 'error' not in text_result:
                if text_result['label'] == 'phishing' and text_result['score'] > 0.85:
                    report.append(
                        f"üü° –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
                        f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {text_result['score']:.0%}\n"
                        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(text_result['keywords'])}"
                    )
        
        if report:
            bot.reply_to(message, "\n\n".join(report))
        else:
            bot.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ")
    
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # app.run(host='0.0.0.0', port=5000)
    bot.polling(none_stop=True)